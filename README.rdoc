== Welcome to BadalKarkhana

== Getting Started

1) At the command prompt, clone this app:
       git clone https://github.com/iPrayag/badal-karkhana.git

2) install bundler for rvm[http://rvm.io/integration/bundler]
       gem install rubygems-bundler
 
install dependencies
       bundle install

3) check routes

  prayag@prayag:~/hacker_/badal-karkhana$ rake routes
          users GET    /users(.:format)           users#index
                POST   /users(.:format)           users#create
       new_user GET    /users/new(.:format)       users#new
      edit_user GET    /users/:id/edit(.:format)  users#edit
           user GET    /users/:id(.:format)       users#show
                PUT    /users/:id(.:format)       users#update
                DELETE /users/:id(.:format)       users#destroy
  payment_payment GET    /payment/payment(.:format) payment#payment
         stripe        /stripe                    Stripe::Engine

  Routes for Stripe::Engine:
    ping GET  /ping(.:format)   stripe/pings#show
  events POST /events(.:format) stripe/events#create

4) run tests
   $ rake test
      
5) start the web server at port 3000:
       rails server -p3000 (run with --help for options)

6) Go to http://localhost:3000/ and you'll see:
       "Badal Karkhana!"

7) deploy using capistrano[http://guides.beanstalkapp.com/deployments/deploy-with-capistrano.html#install-capistrano]
       $ capify .
       [add] writing './Capfile'
       [add] writing './config/deploy.rb'
       [done] capified!


Check rest api at `http://localhost:3000/validation/validate.xml`

kannel-api[http://www.slideshare.net/snowgiraffe/railsconf2009-integrating-sms-with-your-rails-app]

8) Follow the guidelines to start developing your application. You can find the following resources handy:

* The Getting Started Guide: http://guides.rubyonrails.org/getting_started.html
* Ruby on Rails Tutorial Book: http://www.railstutorial.org/

!(Snapshot)[https://github.com/iPrayag/badal-karkhana/raw/master/badal-karkhana-prayagupd.png]


== Debugging Rails


Have "tail -f" commands running on the server.log and development.log. Rails will automatically display
debugging and runtime information to these files. Debugging info will also be
shown in the browser on requests from 127.0.0.1.

You can also log your own messages directly into the log file from your code
using the Ruby logger class from inside your controllers. Example:

  class WeblogController < ActionController::Base
    def destroy
      @weblog = Weblog.find(params[:id])
      @weblog.destroy
      logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")
    end
  end

The result will be a message in your log file along the lines of:

  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1!

More information on how to use the logger is at http://www.ruby-doc.org/core/

Also, Ruby documentation can be found at http://www.ruby-lang.org/. There are
several books available online as well:

* Programming Ruby: http://www.ruby-doc.org/docs/ProgrammingRuby/ (Pickaxe)
* Learn to Program: http://pine.fm/LearnToProgram/ (a beginners guide)

These two books will bring you up to speed on the Ruby language and also on
programming in general.


== Debugger

Debugger support is available through the debugger command when you start your
Mongrel or WEBrick server with --debugger. This means that you can break out of
execution at any point in the code, investigate and change the model, and then,
resume execution! You need to install ruby-debug to run the server in debugging
mode. With gems, use <tt>sudo gem install ruby-debug</tt>. Example:

  class WeblogController < ActionController::Base
    def index
      @posts = Post.all
      debugger
    end
  end

So the controller will accept the action, run the first line, then present you
with a IRB prompt in the server window. Here you can do things like:

  >> @posts.inspect
  => "[#<Post:0x14a6be8
          @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>,
       #<Post:0x14a6620
          @attributes={"title"=>"Rails", "body"=>"Only ten..", "id"=>"2"}>]"
  >> @posts.first.title = "hello from a debugger"
  => "hello from a debugger"

...and even better, you can examine how your runtime objects actually work:

  >> f = @posts.first
  => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>
  >> f.
  Display all 152 possibilities? (y or n)

Finally, when you're ready to resume execution, you can enter "cont".


== Console

The console is a Ruby shell, which allows you to interact with your
application's domain model. Here you'll have all parts of the application
configured, just like it is when the application is running. You can inspect
domain models, change values, and save to the database. Starting the script
without arguments will launch it in the development environment.

To start the console, run <tt>rails console</tt> from the application
directory.

Options:

* Passing the <tt>-s, --sandbox</tt> argument will rollback any modifications
  made to the database.
* Passing an environment name as an argument will load the corresponding
  environment. Example: <tt>rails console production</tt>.

To reload your controllers and models after launching the console run
<tt>reload!</tt>

More information about irb can be found at:
link:http://www.rubycentral.org/pickaxe/irb.html


== dbconsole

You can go to the command line of your database directly through <tt>rails
dbconsole</tt>. You would be connected to the database with the credentials
defined in database.yml. Starting the script without arguments will connect you
to the development database. Passing an argument will connect you to a different
database, like <tt>rails dbconsole production</tt>. Currently works for MySQL,
PostgreSQL and SQLite 3.


